import numpy as np
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers

# ---------- Step 1: Training Data (more natural, more fun 🤖) ----------
# Format: [Study hours, Sleep hours], Pass=1, Fail=0
# Note: Give only hours, no minutes 😅
X = [
    [0, 2], [1, 3], [2, 4], [3, 5], [4, 6],    # Low study → mostly Fail
    [5, 2], [6, 3], [7, 4], [8, 2], [9, 1],    # High study → mostly Pass
    [2, 8], [3, 9], [1, 10], [4, 9], [5, 10]   # Too much sleep → Fail
]
Y = [
    [0], [0], [0], [1], [1],
    [1], [1], [1], [1], [1],
    [0], [0], [0], [0], [0]
]

X = np.array(X)
Y = np.array(Y)

# ---------- Step 2: Normalize data (important! 😤) ----------
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# ---------- Step 3: Build the Model ----------
study_bot = keras.Sequential([
    layers.Input(shape=(2,)),
    layers.Dense(4, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])

study_bot.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
study_bot.fit(X_scaled, Y, epochs=1000, verbose=0)

# ---------- Step 4: Take input from user ----------
print("Hey buddy! Let's see if you PASS or FAIL today 😎")
hours_studied = float(input("Enter hours studied today 🧠: "))
hours_slept = float(input("Enter hours slept 💤: "))

user_input = scaler.transform([[hours_studied, hours_slept]])
pred = study_bot.predict(user_input)

# ---------- Step 5: Show result ----------
confidence = pred[0][0]
if confidence > 0.5:
    print(f"Prediction: PASS ✅🎉 (Confidence: {confidence:.2f})")
else:
    print(f"Prediction: FAIL ❌😅 (Confidence: {confidence:.2f})")

# ---------- Optional: Friendly tip ----------
if confidence < 0.7:
    print("Tip: Maybe study a bit more or sleep smarter tomorrow 😉")
